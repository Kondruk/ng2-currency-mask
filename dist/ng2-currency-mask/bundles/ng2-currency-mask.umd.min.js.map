{"version":3,"sources":["ng://ng2-currency-mask/lib/currency-mask.config.ts","ng://ng2-currency-mask/lib/input.manager.ts","ng://ng2-currency-mask/lib/input.service.ts","ng://ng2-currency-mask/lib/input.handler.ts","ng://ng2-currency-mask/lib/currency-mask.directive.ts","ng://ng2-currency-mask/lib/currency-mask.module.ts"],"names":["CURRENCY_MASK_CONFIG","InjectionToken","InputManager","htmlInputElement","this","prototype","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","length","Object","defineProperty","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","getSelection","anchorNode","firstChild","lenght","normalizedValue","replace","startRange","endRange","compareEndPoints","slice","split","_storedRawValue","InputService","options","inputManager","addNumber","keyCode","applyMask","keyChar","String","fromCharCode","updateFieldValue","isNumber","_a","allowNegative","decimal","precision","prefix","suffix","thousands","onlyNumbers","Number","toFixed","integerPart","decimalPart","repeat","isZero","parseInt","indexOf","clearMask","RegExp","parseFloat","changeToNegative","charAt","changeToPositive","fixCursorPosition","forceToEndPosition","currentCursorPosition","getRawValueWithoutSuffixEndPosition","getRawValueWithoutPrefixStartPosition","removeNumber","test","undefined","updateOptions","canInputMoreNumbers","storedRawValue","InputHandler","inputService","handleClick","event","chromeAndroid","Math","abs","isNaN","handleCut","_this","isReadOnly","setTimeout","setValue","onModelChange","handleInput","getNewKeyCode","rawValueLength","rawValueSelectionEnd","rawValueWithoutSuffixEndPosition","storedRawValueLength","setCursorPosition","handleKeydown","which","charCode","preventDefault","selectionRangeLength","handleKeypress","isArrowEndHomeKeyInFirefox","handleKeyup","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","oldString","newString","x","charCodeAt","readOnly","target","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","keyValueDiffer","find","create","ngAfterViewInit","console","log","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","assign","ngOnInit","handleBlur","apply","isChromeAndroid","navigator","userAgent","registerOnChange","registerOnTouched","setDisabledState","disabled","validate","abstractControl","result","max","min","writeValue","core","ElementRef","KeyValueDiffers","selectors","hostBindings","rf","ctx","NG_VALIDATORS","CurrencyMaskModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface CurrencyMaskConfig {\r\n\r\n    align: string;\r\n    allowNegative: boolean;\r\n    decimal: string;\r\n    precision: number;\r\n    prefix: string;\r\n    suffix: string;\r\n    thousands: string;\r\n}\r\n\r\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");","export class InputManager {\r\n\r\n    private _storedRawValue: string;\r\n\r\n    constructor(private htmlInputElement: any) {\r\n    }\r\n\r\n    setCursorAt(position: number): void {\r\n        if (this.htmlInputElement.setSelectionRange) {\r\n            this.htmlInputElement.focus();\r\n            this.htmlInputElement.setSelectionRange(position, position);\r\n        } else if (this.htmlInputElement.createTextRange) {\r\n            let textRange = this.htmlInputElement.createTextRange();\r\n            textRange.collapse(true);\r\n            textRange.moveEnd(\"character\", position);\r\n            textRange.moveStart(\"character\", position);\r\n            textRange.select();\r\n        }\r\n    }\r\n\r\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\r\n        this.rawValue = newRawValue;\r\n        let newLength = newRawValue.length;\r\n        selectionStart = selectionStart - (oldLength - newLength);\r\n        this.setCursorAt(selectionStart);\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let haveNumberSelected = (selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/)) ? true : false;\r\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\r\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        let selectionStart = 0;\r\n        let selectionEnd = 0;\r\n\r\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\r\n            selectionStart = this.htmlInputElement.selectionStart;\r\n            selectionEnd = this.htmlInputElement.selectionEnd;\r\n        } else {\r\n            let range = document.getSelection().anchorNode;\r\n\r\n            if (range && range.firstChild == this.htmlInputElement) {\r\n                let lenght = this.htmlInputElement.value.length;\r\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\r\n                let startRange = this.htmlInputElement.createTextRange();\r\n                let endRange = this.htmlInputElement.createTextRange();\r\n                endRange.collapse(false);\r\n\r\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\r\n                    selectionStart = selectionEnd = lenght;\r\n                } else {\r\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\r\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\r\n\r\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\r\n                        selectionEnd = lenght;\r\n                    } else {\r\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\r\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            selectionStart: selectionStart,\r\n            selectionEnd: selectionEnd\r\n        };\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.htmlInputElement && this.htmlInputElement.value;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this._storedRawValue = value;\r\n\r\n        if (this.htmlInputElement) {\r\n            this.htmlInputElement.value = value;\r\n        }\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this._storedRawValue;\r\n    }\r\n}","import { InputManager } from \"./input.manager\";\r\n\r\nexport class InputService {\r\n\r\n    private inputManager: InputManager;\r\n\r\n    constructor(private htmlInputElement: any, private options: any) {\r\n        this.inputManager = new InputManager(htmlInputElement);\r\n    }\r\n\r\n    addNumber(keyCode: number): void {\r\n        if (!this.rawValue) {\r\n            this.rawValue = this.applyMask(false, \"0\");\r\n        }\r\n\r\n        let keyChar = String.fromCharCode(keyCode);\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\r\n        this.updateFieldValue(selectionStart + 1);\r\n    }\r\n\r\n    applyMask(isNumber: boolean, rawValue: string): string {\r\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\r\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\r\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\r\n\r\n        if (!onlyNumbers) {\r\n            return \"\";\r\n        }\r\n\r\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\r\n\r\n        if (integerPart == \"\") {\r\n            integerPart = \"0\";\r\n        }\r\n\r\n        let newRawValue = integerPart;\r\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\r\n\r\n        if (precision > 0) {\r\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\r\n            newRawValue += decimal + decimalPart;\r\n        }\r\n\r\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\r\n        let operator = (rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero) ? \"-\" : \"\";\r\n        return operator + prefix + newRawValue + suffix;\r\n    }\r\n\r\n    clearMask(rawValue: string): number {\r\n        if (rawValue == null || rawValue == \"\") {\r\n            return null;\r\n        }\r\n\r\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\r\n\r\n        if (this.options.thousands) {\r\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\r\n        }\r\n\r\n        if (this.options.decimal) {\r\n            value = value.replace(this.options.decimal, \".\");\r\n        }\r\n\r\n        return parseFloat(value);\r\n    }\r\n\r\n    changeToNegative(): void {\r\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\r\n            let selectionStart = this.inputSelection.selectionStart;\r\n            this.rawValue = \"-\" + this.rawValue;\r\n            this.updateFieldValue(selectionStart + 1);\r\n        }\r\n    }\r\n\r\n    changeToPositive(): void {\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\r\n        this.updateFieldValue(selectionStart - 1);\r\n    }\r\n\r\n    fixCursorPosition(forceToEndPosition?: boolean): void {\r\n        let currentCursorPosition = this.inputSelection.selectionStart;\r\n\r\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\r\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\r\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\r\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\r\n        } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\r\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\r\n        }\r\n    }\r\n\r\n    getRawValueWithoutSuffixEndPosition(): number {\r\n        return this.rawValue.length - this.options.suffix.length;\r\n    }\r\n\r\n    getRawValueWithoutPrefixStartPosition(): number {\r\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\r\n    }\r\n\r\n    removeNumber(keyCode: number): void {\r\n        let { decimal, thousands } = this.options;\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n\r\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\r\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\r\n            selectionStart = this.rawValue.length - this.options.suffix.length;\r\n        }\r\n\r\n        //there is no selection\r\n        if (selectionEnd == selectionStart) {\r\n            //delete key and the target digit is a number\r\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\r\n                selectionEnd = selectionEnd + 1;\r\n            }\r\n\r\n            //delete key and the target digit is the decimal or thousands divider\r\n            if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\r\n                selectionEnd = selectionEnd + 2;\r\n                selectionStart = selectionStart + 1;\r\n            }\r\n\r\n            //backspace key and the target digit is a number\r\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\r\n                selectionStart = selectionStart - 1;\r\n            }\r\n\r\n            //backspace key and the target digit is the decimal or thousands divider\r\n            if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\r\n                selectionStart = selectionStart - 2;\r\n                selectionEnd = selectionEnd - 1;\r\n            }\r\n        }\r\n\r\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\r\n        this.updateFieldValue(selectionStart);\r\n    }\r\n\r\n    updateFieldValue(selectionStart?: number): void {\r\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\r\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\r\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        let value: number = this.value;\r\n        this.options = options;\r\n        this.value = value;\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        return this.inputManager.canInputMoreNumbers;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        return this.inputManager.inputSelection;\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.inputManager.rawValue;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this.inputManager.rawValue = value;\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this.inputManager.storedRawValue;\r\n    }\r\n\r\n    get value(): number {\r\n        return this.clearMask(this.rawValue);\r\n    }\r\n\r\n    set value(value: number) {\r\n        this.rawValue = this.applyMask(true, \"\" + value);\r\n    }\r\n}","import { InputService } from \"./input.service\";\r\n\r\nexport class InputHandler {\r\n\r\n    private inputService: InputService;\r\n    private onModelChange: Function;\r\n    private onModelTouched: Function;\r\n    private htmlInputElement: HTMLInputElement;\r\n\r\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\r\n        this.inputService = new InputService(htmlInputElement, options);\r\n        this.htmlInputElement = htmlInputElement;\r\n    }\r\n\r\n    handleClick(event: any, chromeAndroid: boolean): void {\r\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\r\n\r\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\r\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\r\n            this.inputService.fixCursorPosition(chromeAndroid);\r\n        }\r\n    }\r\n\r\n    handleCut(event: any): void {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 0);\r\n    }\r\n\r\n    handleInput(event: any): void {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n\r\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\r\n        let rawValueLength = this.inputService.rawValue.length;\r\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\r\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\r\n        let storedRawValueLength = this.inputService.storedRawValue.length;\r\n        this.inputService.rawValue = this.inputService.storedRawValue;\r\n\r\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\r\n            this.setCursorPosition(event);\r\n            return;\r\n        }\r\n\r\n        if (rawValueLength < storedRawValueLength) {\r\n            if (this.inputService.value != 0) {\r\n                this.inputService.removeNumber(8);\r\n            } else {\r\n                this.setValue(null);\r\n            }\r\n        }\r\n\r\n        if (rawValueLength > storedRawValueLength) {\r\n            switch (keyCode) {\r\n                case 43:\r\n                    this.inputService.changeToPositive();\r\n                    break;\r\n                case 45:\r\n                    this.inputService.changeToNegative();\r\n                    break;\r\n                default:\r\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\r\n                        return;\r\n                    }\r\n\r\n                    this.inputService.addNumber(keyCode);\r\n            }\r\n        }\r\n\r\n        this.setCursorPosition(event);\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handleKeydown(event: any): void {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n\r\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\r\n            event.preventDefault();\r\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\r\n\r\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\r\n                this.setValue(null);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n\r\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\r\n                this.inputService.removeNumber(keyCode);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n\r\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\r\n                this.inputService.removeNumber(keyCode);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleKeypress(event: any): void {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n\r\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\r\n            return;\r\n        }\r\n\r\n        switch (keyCode) {\r\n            case 43:\r\n                this.inputService.changeToPositive();\r\n                break;\r\n            case 45:\r\n                this.inputService.changeToNegative();\r\n                break;\r\n            default:\r\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\r\n                    this.inputService.addNumber(keyCode);\r\n                }\r\n        }\r\n\r\n        event.preventDefault();\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handleKeyup(event: any): void {\r\n        this.inputService.fixCursorPosition();\r\n    }\r\n\r\n    handlePaste(event: any): void {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 1);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        this.inputService.updateOptions(options);\r\n    }\r\n\r\n    getOnModelChange(): Function {\r\n        return this.onModelChange;\r\n    }\r\n\r\n    setOnModelChange(callbackFunction: Function): void {\r\n        this.onModelChange = callbackFunction;\r\n    }\r\n\r\n    getOnModelTouched(): Function {\r\n        return this.onModelTouched;\r\n    }\r\n\r\n    setOnModelTouched(callbackFunction: Function) {\r\n        this.onModelTouched = callbackFunction;\r\n    }\r\n\r\n    setValue(value: number): void {\r\n        this.inputService.value = value;\r\n    }\r\n\r\n    private getNewKeyCode(oldString: string, newString: string): number {\r\n        if (oldString.length > newString.length) {\r\n            return null;\r\n        }\r\n\r\n        for (let x = 0; x < newString.length; x++) {\r\n            if (oldString.length == x || oldString[x] != newString[x]) {\r\n                return newString.charCodeAt(x);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isArrowEndHomeKeyInFirefox(event: any) {\r\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private isReadOnly() {\r\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\r\n    }\r\n\r\n    private setCursorPosition(event: any): void {\r\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\r\n\r\n        setTimeout(function () {\r\n            event.target.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\r\n        }, 0);\r\n    }\r\n}","import { AfterViewInit, Directive, DoCheck, ElementRef, forwardRef, HostListener, Inject, Input, KeyValueDiffer, KeyValueDiffers, OnInit, Optional } from \"@angular/core\";\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from \"@angular/forms\";\r\nimport { CurrencyMaskConfig, CURRENCY_MASK_CONFIG } from \"./currency-mask.config\";\r\nimport { InputHandler } from \"./input.handler\";\r\n\r\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => CurrencyMaskDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: \"[currencyMask]\",\r\n    providers: [\r\n        CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR,\r\n        { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }\r\n    ]\r\n})\r\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit, Validator {\r\n\r\n    @Input() max: number;\r\n    @Input() min: number;\r\n    @Input() options: any = {};\r\n\r\n    inputHandler: InputHandler;\r\n    keyValueDiffer: KeyValueDiffer<any, any>;\r\n\r\n    optionsTemplate = {\r\n        align: \"right\",\r\n        allowNegative: true,\r\n        decimal: \".\",\r\n        precision: 2,\r\n        prefix: \"$ \",\r\n        suffix: \"\",\r\n        thousands: \",\"\r\n    };\r\n\r\n    constructor(@Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig, private elementRef: ElementRef, private keyValueDiffers: KeyValueDiffers) {\r\n        if (currencyMaskConfig) {\r\n            this.optionsTemplate = currencyMaskConfig;\r\n        }\r\n\r\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        console.log('test');\r\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.keyValueDiffer.diff(this.options)) {\r\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\r\n            this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\r\n    }\r\n\r\n    @HostListener(\"blur\", [\"$event\"])\r\n    handleBlur(event: any) {\r\n        this.inputHandler.getOnModelTouched().apply(event);\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    handleClick(event: any) {\r\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\r\n    }\r\n\r\n    @HostListener(\"cut\", [\"$event\"])\r\n    handleCut(event: any) {\r\n        if (!this.isChromeAndroid()) {\r\n            this.inputHandler.handleCut(event);\r\n        }\r\n    }\r\n\r\n    @HostListener(\"input\", [\"$event\"])\r\n    handleInput(event: any) {\r\n        if (this.isChromeAndroid()) {\r\n            this.inputHandler.handleInput(event);\r\n        }\r\n    }\r\n\r\n    @HostListener(\"keydown\", [\"$event\"])\r\n    handleKeydown(event: any) {\r\n        if (!this.isChromeAndroid()) {\r\n            this.inputHandler.handleKeydown(event);\r\n        }\r\n    }\r\n\r\n    @HostListener(\"keypress\", [\"$event\"])\r\n    handleKeypress(event: any) {\r\n        if (!this.isChromeAndroid()) {\r\n            this.inputHandler.handleKeypress(event);\r\n        }\r\n    }\r\n\r\n    @HostListener(\"keyup\", [\"$event\"])\r\n    handleKeyup(event: any) {\r\n        if (!this.isChromeAndroid()) {\r\n            this.inputHandler.handleKeyup(event);\r\n        }\r\n    }\r\n\r\n    @HostListener(\"paste\", [\"$event\"])\r\n    handlePaste(event: any) {\r\n        if (!this.isChromeAndroid()) {\r\n            this.inputHandler.handlePaste(event);\r\n        }\r\n    }\r\n\r\n    isChromeAndroid(): boolean {\r\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\r\n    }\r\n\r\n    registerOnChange(callbackFunction: Function): void {\r\n        this.inputHandler.setOnModelChange(callbackFunction);\r\n    }\r\n\r\n    registerOnTouched(callbackFunction: Function): void {\r\n        this.inputHandler.setOnModelTouched(callbackFunction);\r\n    }\r\n\r\n    setDisabledState(value: boolean): void {\r\n        this.elementRef.nativeElement.disabled = value;\r\n    }\r\n\r\n    validate(abstractControl: AbstractControl): { [key: string]: any; } {\r\n        let result: any = {};\r\n\r\n        if (abstractControl.value > this.max) {\r\n            result.max = true;\r\n        }\r\n\r\n        if (abstractControl.value < this.min) {\r\n            result.min = true;\r\n        }\r\n\r\n        return result != {} ? result : null;\r\n    }\r\n\r\n    writeValue(value: number): void {\r\n        this.inputHandler.setValue(value);\r\n    }\r\n}","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { CurrencyMaskDirective } from \"./currency-mask.directive\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    declarations: [\r\n        CurrencyMaskDirective\r\n    ],\r\n    exports: [\r\n        CurrencyMaskDirective\r\n    ]\r\n})\r\nexport class CurrencyMaskModule {\r\n}"]}